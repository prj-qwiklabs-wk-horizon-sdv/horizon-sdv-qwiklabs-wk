name: used - terraform

on:
  workflow_call:
    secrets:
      wif-provider:
        required: false
        description: "Workload Identity Federation provider"
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
      sdv-secret:
        required: true
        description: "Define the SDV secret value"
      gh-app-key:
        required: true
        description: "Github App Private Key"
      gh-argocd-initial-password:
        required: false
        description: "Github Secret ARGOCD_INITIAL_PASSWORD"
      gh-jenkins-initial-password:
        required: false
        description: "Github Secret JENKINS_INITIAL_PASSWORD"
      gh-keycloak-initial-password:
        required: false
        description: "Github Secret KEYCLOAK_INITIAL_PASSWORD"

    inputs:
      environment:
        required: false
        description: "environment to use"
        type: string
      directory:
        required: false
        description: "Terraform directory"
        default: "terraform"
        type: string
      wif-provider:
        required: false
        description: "Workload Identity Federation provider"
        type: string
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
        type: string
      terraform-version:
        required: false
        default: latest
        type: string
      terraform-apply:
        required: false
        default: false
        type: boolean
      parallelism:
        required: false
        description: "Terraform parallelism"
        default: 100
        type: number

jobs:

  get-env:
    name: Get environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.get-env.outputs.environment }}
      env_only: ${{ steps.get-env.outputs.env_only }}
    steps:
    - name: get environment
      id: get-env
      shell: bash
      run: |
        if [[ "${{ inputs.environment }}" != '' ]]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT;
          temp=${{ inputs.environment }}
          env_only=${temp%-plan*}
          env_only=${env_only%-apply*}
          echo "env_only=$env_only" >> $GITHUB_OUTPUT;
        elif [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
          echo "environment=main" >> $GITHUB_OUTPUT;
          echo "env_only=main" >> $GITHUB_OUTPUT;
        fi

  terraform:
    name: Terraform
    runs-on: self-hosted
    needs: get-env
    environment: ${{ needs.get-env.outputs.environment }}

    steps:

    - name: Convert key to PKCS#8 format
      id: create-pkcs8
      env:
        GH_APP_KEY: ${{ secrets.gh-app-key }}
      run: |
        # Convert the key to PKCS#8 format
        echo "$GH_APP_KEY" | openssl pkcs8 -topk8 -nocrypt -outform PEM > key.pem

        # Read the converted key and set it as an environment variable
        PKCS8_KEY=$(<key.pem)
        echo "TF_VAR_sdv_gh_app_key_pkcs8<<EOF" >> $GITHUB_ENV
        echo "$PKCS8_KEY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: set environment variables
      id: set-vars
      shell: bash
      run: |
        echo "TF_VAR_sdv_gh_app_id=${{ vars.GH_APP_ID }}" >> $GITHUB_ENV;
        echo "TF_VAR_sdv_gh_installation_id=${{ vars.GH_INSTALLATION_ID }}" >> $GITHUB_ENV;
        echo "TF_VAR_sdv_gh_app_key<<EOF" >> $GITHUB_ENV
        echo  "${{ secrets.gh-app-key }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "TF_VAR_sdv_gh_argocd_initial_password=${{ secrets.gh-argocd-initial-password }}" >> $GITHUB_ENV
        echo "TF_VAR_sdv_gh_jenkins_initial_password=${{ secrets.gh-jenkins-initial-password }}" >> $GITHUB_ENV
        echo "TF_VAR_sdv_gh_keycloak_initial_password=${{ secrets.gh-keycloak-initial-password }}" >> $GITHUB_ENV

        if [[ "${{ secrets.gcp-sa }}" != '' && "${{ secrets.wif-provider }}" != '' ]]; then
          echo "GCP_SA=${{ secrets.gcp-sa }}" >> $GITHUB_ENV;
          echo "GCP_WIF=${{ secrets.wif-provider }}" >> $GITHUB_ENV;
        else
          echo "GCP_SA=${{ inputs.gcp-sa }}" >> $GITHUB_ENV;
          echo "GCP_WIF=${{ inputs.wif-provider }}" >> $GITHUB_ENV;
        fi
        echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_ENV;
        echo -n "GCP_SA=${{ secrets.gcp-sa }}" | base64

    - name: Get Terraform fetcher GitHub App token
      uses: tibdex/github-app-token@v1
      id: get_github_app_token
      with:
        app_id: ${{ vars.GH_APP_ID }}
        private_key: ${{ secrets.gh-app-key }}

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Checkout source code
      uses: actions/checkout@v4.1.1

    - id: auth
      # if: ${{ steps.gcp-secret-check.outputs.secrets != 'true' }}
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.gcp-sa-key }}'
        service_account: ${{ env.GCP_SA }}
        workload_identity_provider: ${{ env.GCP_WIF }}

    - name: Setup gcloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'beta'
        project_id: "${{ env.GCP_PROJECT_ID }}" # consider adjusting to an env var.

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: terraform plan
      working-directory: ${{ inputs.directory }}/
      id: tfplan
      run: |
        git config --global url."https://x-access-token:${{steps.get_github_app_token.outputs.token}}@github.com".insteadOf https://github.com
        terraform init -input=false
        terraform plan -parallelism=${{ inputs.parallelism }} -input=false -no-color -out=tfplan && terraform show -no-color tfplan
      continue-on-error: true

    - name: Reformat Plan
      if: github.ref != 'refs/heads/main'
      env:
        TFPLAN_STDOUT: ${{ steps.tfplan.outputs.stdout }}
        TFPLAN_STDERR: ${{ steps.tfplan.outputs.stderr }}
      run: |
        if [[ "${{ steps.tfplan.outcome }}" == 'success' ]]; then
          printf '%s' "$TFPLAN_STDOUT" \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
        else
          printf '%s' "$TFPLAN_STDERR" \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
        fi

    - name: Put Plan in Env Var
      if: github.ref != 'refs/heads/main'
      run: |
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Post Plan to GitHub PR
      uses: mshick/add-pr-comment@v2
      if: github.ref != 'refs/heads/main'
      with:
        allow-repeats: false
        repo-token: ${{steps.get_github_app_token.outputs.token}}
        message-id: plan-${{ needs.get-env.outputs.environment }}
        message: |
          ## Terraform plan ${{ needs.get-env.outputs.env_only }}
          ```diff
          ${{ env.PLAN }}
          ```
      continue-on-error: true

    - name: Check if Plan failed
      if: steps.tfplan.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed('Terraform plan failed.')

    - name: terraform apply
      working-directory: ${{ inputs.directory }}/
      id: tfapply
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global url."https://x-access-token:${{steps.get_github_app_token.outputs.token}}@github.com".insteadOf https://github.com
        terraform apply -parallelism=${{ inputs.parallelism }} -input=false -no-color tfplan
      continue-on-error: true

    - name: Post Apply Success
      if: github.ref == 'refs/heads/main' && steps.tfapply.outcome == 'success'
      uses: mshick/add-pr-comment@v2
      with:
        allow-repeats: false
        repo-token: ${{steps.get_github_app_token.outputs.token}}
        message-id: apply-${{ needs.get-env.outputs.environment }}
        message: |
          ## Terraform Apply ${{ needs.get-env.outputs.env_only }} Succeeded
          ```
          ${{ steps.tfapply.outputs.stdout }}
          ```
      continue-on-error: true

    - name: Post Apply Failure
      if: github.ref == 'refs/heads/main' && steps.tfapply.outcome == 'failure'
      uses: mshick/add-pr-comment@v2
      with:
        allow-repeats: false
        repo-token: ${{steps.get_github_app_token.outputs.token}}
        message-id: apply-${{ needs.get-env.outputs.environment }}
        message: |
          ## Terraform Apply ${{ needs.get-env.outputs.env_only }} Failed
          ```
          ${{ steps.tfapply.outputs.stderr }}
          ```
      continue-on-error: true

    - name: Fail if apply failed
      if: github.ref == 'refs/heads/main' && steps.tfapply.outcome == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed('Terraform apply failed.')
