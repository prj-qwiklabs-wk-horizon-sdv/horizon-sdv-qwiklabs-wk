name: Docker build Artifact Registry
on:
  workflow_call:
    secrets:
      wif-provider: 
        required: false
        description: "Workload Identity Federation provider"
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
      image-registry:
        required: false
        description: "Artifact registry (can be passed as secret or input)"


    inputs:
      wif-provider: 
        required: false
        description: "Workload Identity Federation provider"
        type: string
      gcp-sa:
        required: false
        description: "GCP Service account to impersonate"
        type: string
      registry-location:
        required: false
        description: "Artifact Registry Location"
        type: string
        default: "europe-west1"
      image:
        required: false
        type: string
        description: "image name"
      image-registry:
        required: false
        type: string
        description: "Artifact registry (can be passed as secret or input)"

jobs:
  docker-build:
    name: docker-build
    runs-on: self-hosted

    steps:
    - name: set environment variables
      id: set-vars
      shell: bash
      run: |
        if [[ "${{ secrets.image-registry }}" != '' ]]; then
          echo "ARTIFACT_REGISTRY=${{ secrets.image-registry }}" >> $GITHUB_ENV;
        elif [[ "${{ inputs.image-registry }}" != '' ]]; then
          echo "ARTIFACT_REGISTRY=${{ inputs.image-registry }}" >> $GITHUB_ENV;
        else 
          echo "Missing image-registry parameter."
          exit 1
        fi

        if [[ "${{ secrets.gcp-sa }}" != '' && "${{ secrets.wif-provider }}" != '' ]]; then
          echo "GCP_SA=${{ secrets.gcp-sa }}" >> $GITHUB_ENV;
          echo "GCP_WIF=${{ secrets.wif-provider }}" >> $GITHUB_ENV;
        else
          echo "GCP_SA=${{ inputs.gcp-sa }}" >> $GITHUB_ENV;
          echo "GCP_WIF=${{ inputs.wif-provider }}" >> $GITHUB_ENV;
        fi

        if [[ "${{ inputs.image }}" != '' ]]; then
          echo "IMAGE=${{ inputs.image }}" >> $GITHUB_ENV;
        else
          echo "IMAGE=${{ github.event.repository.name }}" >> $GITHUB_ENV;
        fi

    - name: Checkout source code
      uses: actions/checkout@v4.1.1
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.10.6
    
    - id: auth
      uses: google-github-actions/auth@v1
      with:
        token_format: access_token
        service_account: ${{ env.GCP_SA }}
        workload_identity_provider: ${{ env.GCP_WIF }}

    - name: Login to Artifact Registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ inputs.registry-location }}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}
    
    - name: get Docker labels
      uses: docker/metadata-action@v4
      id: meta
      with:
        images: ${{ env.ARTIFACT_REGISTRY }}/${{ env.IMAGE }}
    
    - name: get image ref for scanning 
      run: |
        echo "IMAGE_REF=$(echo ${{ steps.meta.outputs.tags }} | awk '{print $1}')" >> $GITHUB_ENV;

    - name: Build and Push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

      
    - name: Run Trivy Image Docker vulnerability scanner
      uses: aquasecurity/trivy-action@master
      id: trivy
      with:
        image-ref: ${{ env.IMAGE_REF }}
        format: 'table'
        timeout: '10m0s'
        exit-code: '1'
        output: trivy-scan.txt
      continue-on-error: true

    - name: Post trivy scan results as job summary
      if: steps.trivy.outcome == 'failure'
      id: get-scan
      run: |
        echo "## Trivy Scan Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo  "$(cat trivy-scan.txt)" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

