//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// AAOS Build targets pipeline.
pipeline {

  agent {
    kubernetes {
      yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
          labels:
            aaos_pod: "true"
        spec:
          tolerations:
          - key: workloadType
            operator: Equal
            value: android
            effect: "NoSchedule"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: aaos_pod
                    operator: Exists
                topologyKey: kubernetes.io/hostname
          hostname: jenkins-aaos-build-pod
          serviceAccountName: ${JENKINS_SERVICE_ACCOUNT}
          containers:
          - name: builder
            image: ${CLOUD_REGION}-docker.pkg.dev/${CLOUD_PROJECT}/${ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME}:latest
            imagePullPolicy: IfNotPresent
            command:
            - sleep
            args:
            - 4h
            resources:
              limits:
                cpu: 96000m
                memory: 160000Mi
              requests:
                cpu: 96000m
                memory: 160000Mi
            volumeMounts:
              - mountPath: /aaos-cache
                name: aaos-cache
          volumes:
            - name: aaos-cache
              ephemeral:
                volumeClaimTemplate:
                  spec:
                    storageClassName: ${JENKINS_CACHE_STORAGE_CLASS_NAME}
                    resources:
                      requests:
                        storage: 2000Gi
                    accessModes:
                      - ReadWriteOnce
          nodeSelector:
            workloadLabel: android
      """.stripIndent()
    }
  }

  parameters {
    string(name: 'AAOS_GERRIT_MANIFEST_URL',
           defaultValue: 'https://android.googlesource.com/platform/manifest',
           description: "<p>Android Manifest URL, e.g.<br/><ul><li><a href=https://${env.HORIZON_DOMAIN}/android/platform/manifest target=\"_blank\">https://${env.HORIZON_DOMAIN}/android/platform/manifest</a></li><li><a href=https://android.googlesource.com/platform/manifest target=\"_blank\">https://android.googlesource.com/platform/manifest</a></li></ul></p>")

    string(name: 'AAOS_REVISION',
           defaultValue: 'android14-qpr1-automotiveos-release',
           description: '''<p>Android revision tag/branch name, e.g:<br/>
           <ul>
           <li>android14-qpr1-automotiveos-release<br/></li>
           <li>horizon/android14-qpr1-automotiveos-release<br/></li>
           <li>android-15.0.0_r4</li></ul></p>''')

    string(name: 'AAOS_LUNCH_TARGET',
           defaultValue: '',
           description: '''<p>Build Android cuttlefish, virtual devices and RPi targets, e.g.
           <ul>
           <li>sdk_car_x86_64-userdebug</li>
           <li>sdk_car_arm64-userdebug</li>
           <li>aosp_cf_x86_64_auto-userdebug</li>
           <li>aosp_cf_arm64_auto-userdebug</li>
           <li>aosp_rpi4_car-ap3a-userdebug</li>
           <li>aosp_rpi5_car-ap3a-userdebug</li></ul></p>''')

    string(name: 'AAOS_RPI_REVISION',
           defaultValue: 'android-15.0.0_r4',
           description: '''<p>RPi tag/branch name.<br/>
           Reference: <a href="https://github.com/raspberry-vanilla/android_local_manifest" target="_blank">Raspberry Vanilla</a> and only applicable to aosp_rpiX_car targets<br/>
           <i>Pick the correct revision that correlates to the AAOS_REVISION</i></p>''')

    choice(name: 'ANDROID_VERSION',
           choices: ['14', '15'],
           description: '''<p>Android Version for AVD image builds.<br/>
           Used to derive API level, eg. 14 is API Level 34, 15 is API Level 35</p>''')

    booleanParam(name: 'AAOS_CLEAN_BUILD', defaultValue: false,
                 description: '''<p>Clean the build workspace.<br/>
                 <b>Warning:</b> Only use when necessary.</p>''')

    string(name: 'AAOS_ARTIFACT_STORAGE_SOLUTION', defaultValue: 'GCS_BUCKET',
           description: '''<p>Android Artifact Storage:<br/>
           <ul><li>GCS_BUCKET will store to cloud bucket storage</li>
           <li>Empty will result in nothing stored</li></ul></p>''')

    // From manual upstream open review change.
    string(name: 'GERRIT_PROJECT', defaultValue: '',
           description: '<p>Gerrit Project with open review.</p>')
    string(name: 'GERRIT_CHANGE_NUMBER', defaultValue: '',
           description: '<p>Gerrit review item change number.</p>')
    string(name: 'GERRIT_PATCHSET_NUMBER', defaultValue: '',
           description: '<p>Gerrit review item patchset number.</p>')
  }

  environment {
    AAOS_CLEAN_BUILD="${AAOS_CLEAN_BUILD == "true" ? 1 : 0}"
  }

  stages {
    stage ('Initialise') {
      when { expression { env.AAOS_LUNCH_TARGET } }
      steps {
        script {
          currentBuild.description = "${env.AAOS_LUNCH_TARGET}"
        }
        container(name: 'builder') {
          withCredentials([usernamePassword(credentialsId: 'jenkins-gerrit-http-password', passwordVariable: 'GERRIT_PASSWORD', usernameVariable: 'GERRIT_USERNAME')]) {
            sh '''
              GERRIT_PASSWORD=$(echo "${GERRIT_PASSWORD}" |tr -d '\n')
              git config --global credential.helper store
              git config --global url."https://${GERRIT_USERNAME}@${HORIZON_DOMAIN}".insteadOf "https://${HORIZON_DOMAIN}"
              echo https://"${GERRIT_USERNAME}":"${GERRIT_PASSWORD}"@"${HORIZON_DOMAIN}" > ~/.git-credentials

              AAOS_GERRIT_MANIFEST_URL="${AAOS_GERRIT_MANIFEST_URL}" \
              AAOS_REVISION="${AAOS_REVISION}" \
              AAOS_RPI_REVISION="${AAOS_RPI_REVISION}" \
              AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
              AAOS_CLEAN_BUILD=${AAOS_CLEAN_BUILD} \
              ./workloads/android/pipelines/aaos_builder/aaos_initialise.sh
            '''
          }
        }
      }
    }

    stage ('Build'){
      when { expression { env.AAOS_LUNCH_TARGET } }
      steps {
        container(name: 'builder') {
          sh '''
            AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
            AAOS_CLEAN_BUILD=0 \
            ./workloads/android/pipelines/aaos_builder/aaos_build.sh
          '''
        }
      }
    }

    stage ('Storage'){
      when {
        allOf {
          expression { env.AAOS_LUNCH_TARGET }
          expression { env.AAOS_ARTIFACT_STORAGE_SOLUTION }
        }
      }
      steps {
        container(name: 'builder') {
          sh '''
            AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
            AAOS_CLEAN_BUILD=0 \
            AAOS_REVISION="${AAOS_REVISION}" \
            ./workloads/android/pipelines/aaos_builder/aaos_avd_sdk.sh || true

            AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
            AAOS_CLEAN_BUILD=0 \
            AAOS_ARTIFACT_ROOT_NAME="${ANDROID_BUILD_BUCKET_ROOT_NAME}" \
            AAOS_ARTIFACT_STORAGE_SOLUTION="${AAOS_ARTIFACT_STORAGE_SOLUTION}" \
            CLOUD_REGION="${CLOUD_REGION}" \
            ./workloads/android/pipelines/aaos_builder/aaos_storage.sh
          '''
        }
      }
    }
  }
}
