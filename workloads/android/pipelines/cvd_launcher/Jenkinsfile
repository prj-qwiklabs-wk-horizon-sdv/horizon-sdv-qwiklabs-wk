//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// Cuttlefish Virtual Device launcher for use with MTK Connect in order to
// test Cuttlefish Virtual Device images.
// 
// Note: we skip all stages if this is the 1st build because there are no
//       parameters until the 1st declarative scm checkout has been run.
// 
pipeline {

  parameters {
    string(name: 'JENKINS_GCE_CLOUD_LABEL',
           defaultValue: 'cuttlefish-vm-main',
           description: '''<p>The Jenkins GCE Clouds label for the Cuttlefish instance template, e.g.<br/></p>
           <ul>
             <li>cuttlefish-vm-main</li>
             <li>cuttlefish-vm-v101</li>
           </ul>''')

    string(name: 'CUTTLEFISH_DOWNLOAD_URL',
           defaultValue: '',
           description: "<p>Storage URL pointing to the location of the Cuttlefish Virtual Device images and host packages, e.g.<br/>gs://${env.CLOUD_PROJECT}-aaos/Android/Builds/AAOS_Builder/2</p>")

    string(name: 'CUTTLEFISH_MAX_BOOT_TIME',
           defaultValue: '180',
           description: '''<p>Android Cuttlefish max boot time in seconds.<br/>
           Wait on VIRTUAL_DEVICE_BOOT_COMPLETED across devices.</p>''')

    choice(name: 'CUTTLEFISH_KEEP_ALIVE_TIME',
           choices: ['5', '15', '30', '60', '90', '120', '180'],
           description: '''<p>Time in minutes, to keep CVD alive before stopping.</p>''')

    string(name: 'NUM_INSTANCES',
           defaultValue: '1',
           description: '''<p>Number of guest instances to launch (num-instances option)</p>''')

    string(name: 'VM_CPUS',
           defaultValue: '16',
           description: '''<p>Virtual CPU count (cpus option).</p>''')

    string(name: 'VM_MEMORY_MB',
           defaultValue: '16384',
           description: '''<p>total memory available to guest (memory_mb option)</p>''')
  }

  agent { label params.JENKINS_GCE_CLOUD_LABEL }

  stages {
    stage ('Launch Virtual Devices') {
      when { expression { env.BUILD_NUMBER.toInteger() > 1 } }
      steps {
        script {
          // Validate CUTTLEFISH_DOWNLOAD_URL
          if (env.CUTTLEFISH_DOWNLOAD_URL.isEmpty()) {
            currentBuild.result = "ABORTED"
            error('The CUTTLEFISH_DOWNLOAD_URL parameter must be defined!')
          }
        }
        sh '''
          CUTTLEFISH_DOWNLOAD_URL="${CUTTLEFISH_DOWNLOAD_URL}" \
          CUTTLEFISH_MAX_BOOT_TIME="${CUTTLEFISH_MAX_BOOT_TIME}" \
          NUM_INSTANCES=${NUM_INSTANCES} \
          VM_CPUS=${VM_CPUS} \
          VM_MEMORY_MB=${VM_MEMORY_MB} \
          ./workloads/android/pipelines/cvd_launcher/cvd_start_stop.sh --start
        '''
      }
    }

    stage ('MTK Connect to Virtual Devices') {
      when { expression { env.BUILD_NUMBER.toInteger() > 1 } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'jenkins-mtk-connect-apikey', passwordVariable: 'MTK_CONNECT_PASSWORD', usernameVariable: 'MTK_CONNECT_USERNAME')]) {
          sh '''
            sudo \
            MTK_CONNECT_DOMAIN=${HORIZON_DOMAIN} \
            MTK_CONNECT_USERNAME=${MTK_CONNECT_USERNAME} \
            MTK_CONNECT_PASSWORD=${MTK_CONNECT_PASSWORD} \
            MTK_CONNECTED_DEVICES=${NUM_INSTANCES} \
            MTK_CONNECT_TEST_ARTIFACT="${CUTTLEFISH_DOWNLOAD_URL}" \
            MTK_CONNECT_TESTBENCH="${JOB_NAME}-${BUILD_NUMBER}" \
            MTK_CONNECT_NATIVE_LINUX_INSTALL=true \
            ./workloads/android/pipelines/cvd_launcher/cvd_mtk_connect.sh --start
          '''
        }
      }
    }

    stage ('Keep Devices Alive'){
      when { expression { env.BUILD_NUMBER.toInteger() > 1 } }
      steps {
        sh '''
          CUTTLEFISH_KEEP_ALIVE_TIME="${CUTTLEFISH_KEEP_ALIVE_TIME}" \
          ./workloads/android/pipelines/cvd_launcher/cvd_start_stop.sh --keep-alive
        '''
      }
    }
  }

  post {
    always {
      withCredentials([usernamePassword(credentialsId: 'jenkins-mtk-connect-apikey', passwordVariable: 'MTK_CONNECT_PASSWORD', usernameVariable: 'MTK_CONNECT_USERNAME')]) {
        sh '''
          if [ $BUILD_NUMBER -gt 1 ]; then
            sudo \
            MTK_CONNECT_DOMAIN=${HORIZON_DOMAIN} \
            MTK_CONNECT_USERNAME=${MTK_CONNECT_USERNAME} \
            MTK_CONNECT_PASSWORD=${MTK_CONNECT_PASSWORD} \
            MTK_CONNECTED_DEVICES=${NUM_INSTANCES} \
            MTK_CONNECT_TESTBENCH="${JOB_NAME}-${BUILD_NUMBER}" \
            ./workloads/android/pipelines/cvd_launcher/cvd_mtk_connect.sh --stop || true
            ./workloads/android/pipelines/cvd_launcher/cvd_start_stop.sh --stop || true
          else
            echo "Post stage skipped due to conditional"
          fi
        '''
      }
      archiveArtifacts artifacts: 'cvd*.log', followSymlinks: false, onlyIfSuccessful: false, allowEmptyArchive: true
      archiveArtifacts artifacts: 'cuttlefish*.tgz', followSymlinks: false, onlyIfSuccessful: false, allowEmptyArchive: true
    }
  }
}
