// Copyright (c) 2024-2025 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// Build Android CTS for Cuttlefish. Only required if testing CTS changes
// or requiring a new revision without updating the CTS version on CF
// instances.
def kubernetesPodTemplate = """
        apiVersion: v1
        kind: Pod
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
          labels:
            aaos_pod: "true"
        spec:
          tolerations:
          - key: workloadType
            operator: Equal
            value: android
            effect: "NoSchedule"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: aaos_pod
                    operator: Exists
                topologyKey: kubernetes.io/hostname
          hostname: jenkins-aaos-build-pod
          serviceAccountName: ${JENKINS_SERVICE_ACCOUNT}
          containers:
          - name: builder
            image: ${CLOUD_REGION}-docker.pkg.dev/${CLOUD_PROJECT}/${ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME}:latest
            imagePullPolicy: IfNotPresent
            command:
            - sleep
            args:
            - 5h
            resources:
              limits:
                cpu: 96000m
                memory: 160000Mi
              requests:
                cpu: 96000m
                memory: 160000Mi
            volumeMounts:
              - mountPath: /aaos-cache
                name: aaos-cache
          volumes:
            - name: aaos-cache
              ephemeral:
                volumeClaimTemplate:
                  spec:
                    storageClassName: ${JENKINS_CACHE_STORAGE_CLASS_NAME}
                    resources:
                      requests:
                        storage: 2000Gi
                    accessModes:
                      - ReadWriteOnce
          nodeSelector:
            workloadLabel: android
""".stripIndent()

pipeline {

  // Parameters defined in gitops/env/stage2/templates/jenkins.yaml (Jenkins CasC)

  agent none

  environment {
    GERRIT_API_URL="https://${env.HORIZON_DOMAIN}/gerrit"
  }

  stages {
    stage ('Start VM Instance') {
      agent { kubernetes { yaml kubernetesPodTemplate } }
      stages {
        stage ('Clean') {
          when {
            allOf {
              expression { env.AAOS_LUNCH_TARGET }
              expression { env.AAOS_LUNCH_TARGET =~ /(aosp_cf)/ }
              expression { env.AAOS_CLEAN != 'NO_CLEAN' }
            }
          }
          steps {
            script {
              currentBuild.description = "${env.AAOS_LUNCH_TARGET}" + "<br>" + "${env.AAOS_REVISION}" + "<br>" + "$BUILD_USER"
            }
            container(name: 'builder') {
              catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh '''
                  AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
                  AAOS_CLEAN="${AAOS_CLEAN}" \
                  ./workloads/android/pipelines/builds/aaos_builder/aaos_environment.sh
                '''
              }
            }
          }
        }

        stage ('Initialise') {
          when {
            allOf {
              expression { env.AAOS_LUNCH_TARGET }
              expression { env.AAOS_LUNCH_TARGET =~ /(aosp_cf)/ }
              expression { currentBuild.currentResult == 'SUCCESS' }
            }
          }
          steps {
            script {
              currentBuild.description = "${env.AAOS_LUNCH_TARGET}" + "<br>" + "${env.AAOS_REVISION}" + "<br>" + "$BUILD_USER"
            }
            container(name: 'builder') {
              catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                withCredentials([usernamePassword(credentialsId: env.GERRIT_CREDENTIALS_ID, passwordVariable: 'GERRIT_PASSWORD', usernameVariable: 'GERRIT_USERNAME')]) {
                  sh '''
                    set +x
                    echo "AAOS CACHE Persistent Volume Claim: ${NODE_NAME}-aaos-cache" | tee -a build_cache_volume.txt
                    /usr/bin/kubectl get pod ${NODE_NAME} -n jenkins -o=jsonpath='{.spec.nodeName}' | xargs -I {} gcloud compute instances describe {} --zone=${CLOUD_ZONE} | grep 'deviceName: pvc' | awk '{print "AAOS CACHE Persistent Volume: " $2}' | tee -a build_cache_volume.txt || true
                  '''
                  sh '''
                    git config --global credential.helper store
                    git config --global url."https://${GERRIT_USERNAME}@${HORIZON_DOMAIN}/gerrit".insteadOf "https://${HORIZON_DOMAIN}/gerrit"
                    echo https://"${GERRIT_USERNAME}":"${GERRIT_PASSWORD}"@"${HORIZON_DOMAIN}/gerrit" > ~/.git-credentials

                    AAOS_GERRIT_MANIFEST_URL="${AAOS_GERRIT_MANIFEST_URL}" \
                    AAOS_REVISION="${AAOS_REVISION}" \
                    AAOS_RPI_REVISION="${AAOS_RPI_REVISION}" \
                    AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
                    AAOS_CLEAN="NO_CLEAN" \
                    GERRIT_SERVER_URL="${GERRIT_API_URL}" \
                    REPO_SYNC_JOBS="${GERRIT_REPO_SYNC_JOBS}" \
                    ./workloads/android/pipelines/builds/aaos_builder/aaos_initialise.sh
                  '''
                }
              }
              archiveArtifacts artifacts: 'build_cache*.txt', followSymlinks: false, onlyIfSuccessful: false, allowEmptyArchive: true
            }
          }
        }

        stage ('Build') {
          when {
            allOf {
              expression { env.AAOS_LUNCH_TARGET }
              expression { env.AAOS_LUNCH_TARGET =~ /(aosp_cf)/ }
              expression { currentBuild.currentResult == 'SUCCESS' }
            }
          }
          steps {
            container(name: 'builder') {
             catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh '''
                  AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
                  AAOS_BUILD_CTS=1 \
                  AAOS_CLEAN="NO_CLEAN" \
                  ./workloads/android/pipelines/builds/aaos_builder/aaos_build.sh
                '''
              }
            }
          }
        }

        stage ('Storage') {
          when {
            allOf {
              expression { env.AAOS_LUNCH_TARGET }
              expression { env.AAOS_LUNCH_TARGET =~ /(aosp_cf)/ }
              expression { env.AAOS_ARTIFACT_STORAGE_SOLUTION }
              expression { currentBuild.currentResult == 'SUCCESS' }
            }
          }
          steps {
            container(name: 'builder') {
              catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                sh '''
                  AAOS_LUNCH_TARGET="${AAOS_LUNCH_TARGET}" \
                  AAOS_BUILD_CTS=1 \
                  AAOS_ARTIFACT_ROOT_NAME="${ANDROID_BUILD_BUCKET_ROOT_NAME}" \
                  AAOS_ARTIFACT_STORAGE_SOLUTION="${AAOS_ARTIFACT_STORAGE_SOLUTION}" \
                  CLOUD_REGION="${CLOUD_REGION}" \
                  AAOS_CLEAN="NO_CLEAN" \
                  ./workloads/android/pipelines/builds/aaos_builder/aaos_storage.sh
                '''
                archiveArtifacts artifacts: '*artifacts*.txt', followSymlinks: false, onlyIfSuccessful: false, allowEmptyArchive: true
              }
            }
          }
        }

        stage ('Retain instance') {
          when {
            allOf {
              expression { env.AAOS_LUNCH_TARGET }
              expression { env.AAOS_LUNCH_TARGET =~ /(aosp_cf)/ }
            }
          }
          steps {
            container(name: 'builder') {
              script {
                sleep(time: "${INSTANCE_RETENTION_TIME}", unit: 'MINUTES')
              }
            }
          }
        }
      }
    }
  }
}
