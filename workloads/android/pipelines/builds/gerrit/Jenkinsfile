//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// AAOS Gerrit Triggered Build.
pipeline {

  agent {
    kubernetes {
      yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
          labels:
            aaos_pod: "true"
        spec:
          tolerations:
          - key: workloadType
            operator: Equal
            value: android
            effect: "NoSchedule"
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: aaos_pod
                    operator: Exists
                topologyKey: kubernetes.io/hostname
          hostname: jenkins-aaos-build-pod
          serviceAccountName: ${JENKINS_SERVICE_ACCOUNT}
          containers:
          - name: builder
            image: ${CLOUD_REGION}-docker.pkg.dev/${CLOUD_PROJECT}/${ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME}:latest
            imagePullPolicy: IfNotPresent
            command:
            - sleep
            args:
            - 4h
            resources:
              limits:
                cpu: 96000m
                memory: 160000Mi
              requests:
                cpu: 96000m
                memory: 160000Mi
            volumeMounts:
              - mountPath: /aaos-cache
                name: aaos-cache
          volumes:
            - name: aaos-cache
              ephemeral:
                volumeClaimTemplate:
                  spec:
                    storageClassName: ${JENKINS_CACHE_STORAGE_CLASS_NAME}
                    resources:
                      requests:
                        storage: 2000Gi
                    accessModes:
                      - ReadWriteOnce
          nodeSelector:
            workloadLabel: android
      """.stripIndent()
    }
  }

  triggers {
    gerrit customUrl: '', gerritProjects: [[branches: [[compareType: 'PLAIN', pattern: 'android14-qpr1-automotiveos-release']], compareType: 'PLAIN', disableStrictForbiddenFileVerification: false, pattern: 'android/device/generic/car']], serverName: 'Gerrit'
  }

  stages {
    stage ('Git Credentials') {
      steps {
        container(name: 'builder') {
          withCredentials([usernamePassword(credentialsId: 'jenkins-gerrit-http-password', passwordVariable: 'GERRIT_PASSWORD', usernameVariable: 'GERRIT_USERNAME')]) {
            sh '''
              git config --global credential.helper store
              git config --global url."https://${GERRIT_USERNAME}@${HORIZON_DOMAIN}".insteadOf "https://${HORIZON_DOMAIN}"
              echo https://"${GERRIT_USERNAME}":"${GERRIT_PASSWORD}"@"${HORIZON_DOMAIN}" > ~/.git-credentials
            '''
          }
        }
      }
    }

    stage ('Build: sdk_car_x86_64-userdebug') {
      steps {
        container(name: 'builder') {
          sh '''
            export AAOS_GERRIT_MANIFEST_URL="https://${HORIZON_DOMAIN}/android/platform/manifest"
            export AAOS_REVISION="android14-qpr1-automotiveos-release"
            export AAOS_LUNCH_TARGET="sdk_car_x86_64-userdebug"
            export AAOS_CLEAN_BUILD=0
            export AAOS_ARTIFACT_ROOT_NAME="${ANDROID_BUILD_BUCKET_ROOT_NAME}"
            export CLOUD_REGION="${CLOUD_REGION}"
            ./workloads/android/pipelines/builds/aaos_builder/aaos_initialise.sh
            ./workloads/android/pipelines/builds/aaos_builder/aaos_build.sh
            ./workloads/android/pipelines/builds/aaos_builder/aaos_avd_sdk.sh || true
            ./workloads/android/pipelines/builds/aaos_builder/aaos_storage.sh
          '''
        }
      }
    }

    stage ('Build: aosp_cf_x86_64_auto-userdebug') {
      steps {
        container(name: 'builder') {
          sh '''
            export AAOS_GERRIT_MANIFEST_URL="https://${HORIZON_DOMAIN}/android/platform/manifest"
            export AAOS_REVISION="android14-qpr1-automotiveos-release"
            export AAOS_LUNCH_TARGET="aosp_cf_x86_64_auto-userdebug"
            export AAOS_CLEAN_BUILD=0
            export AAOS_ARTIFACT_ROOT_NAME="${ANDROID_BUILD_BUCKET_ROOT_NAME}"
            export CLOUD_REGION="${CLOUD_REGION}"
            ./workloads/android/pipelines/builds/aaos_builder/aaos_initialise.sh
            ./workloads/android/pipelines/builds/aaos_builder/aaos_build.sh
            ./workloads/android/pipelines/builds/aaos_builder/aaos_storage.sh
          '''
        }
      }
    }

    stage ('Test: aosp_cf_x86_64_auto-userdebug') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          container(name: 'builder') {
            sh '''
              BUCKET_FOLDER=$(echo "$JOB_NAME" | tr ' ' '_')
              export CUTTLEFISH_DOWNLOAD_URL="gs://${CLOUD_PROJECT}-aaos/$BUCKET_FOLDER/$BUILD_NUMBER"
              export CTS_DOWNLOAD_URL="${CUTTLEFISH_DOWNLOAD_URL}"
              export CTS_VERSION=14
              export CTS_TESTPLAN="cts-virtual-device-stable"
              export CTS_MODULE="CtsHostsideNumberBlockingTestCases"
              ./workloads/android/pipelines/tests/cvd_launcher/cvd_start_stop.sh --start
              ./workloads/android/pipelines/tests/cts_execution/cts_initialise.sh
              ./workloads/android/pipelines/tests/cts_execution/cts_execution.sh
            '''
          }
        }
      }
    }
  }

  // REVIEW what is returned.
  post {
    always {
      // Ensure we always stop CVD.
      sh '''
        ./workloads/android/pipelines/tests/cvd_launcher/cvd_start_stop.sh --stop || true
      '''
    }

    success {
      gerritReview labels: [Verified: 1], message: 'Build was successful'
    }
    unstable {
      gerritReview labels: [Verified: 0], message: 'Build is unstable'
    }
    failure {
      gerritReview labels: [Verified: -1], message: 'Build has failed'
    }
  }
}

