//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Description:
// Jenkins pipeline to create Google Compute Engine (GCE) instance templates
// for use with CVD Launcher and CTS Execution jobs.
//
// It reuses the AAOS Docker Builder Docker image, which contains all the
// necessary packages to create the instance template.
//
// The pipeline has two parameters:
//
// * ANDROID_CUTTLEFISH_REVISION: a string parameter that specifies the
//   branch or tag version of Android Cuttlefish to use.
// * DELETE: a boolean parameter that determines whether to delete existing
//   instances and skip creation steps. Helps to save on cost and
//   maintenance.
//
// Note: we skip all stages if this is the 1st build because there are no
//       parameters until the 1st declarative scm checkout has been run.
//
pipeline {

  agent {
    kubernetes {
      yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        spec:
          serviceAccountName: ${JENKINS_SERVICE_ACCOUNT}
          containers:
          - name: builder
            image: ${CLOUD_REGION}-docker.pkg.dev/${CLOUD_PROJECT}/${ANDROID_BUILD_DOCKER_ARTIFACT_PATH_NAME}:latest
            imagePullPolicy: IfNotPresent
            command:
            - sleep
            args:
            - 4h
      """.stripIndent()
    }
  }

  // Block concurrent builds to avoid clashing.
  options {
    buildBlocker (useBuildBlocker: true, blockLevel: 'GLOBAL', scanQueueFor: 'BUILDABLE', blockingJobs: 'CF.*Template.*')
  }

  parameters {
    string(name: 'ANDROID_CUTTLEFISH_REVISION',
           defaultValue: 'v1.0.0',
           description: '''<p>The branch/tag version of Android Cuttlefish to use, e.g..</p>
           <ul>
             <li>v1.0.0</li>
             <li>v0.9.31</li>
             <li>main</li>
           </ul>
           <p>Reference: <a href="https://github.com/google/android-cuttlefish.git" target="_blank">android-cuttlefish.git</a></p>''')

    booleanParam(name: 'DELETE', defaultValue: false,
                 description: '''<p>Delete existing templates, skip creation steps.<br/>
                 Useful for removing old instances to reduce costs.</p>''')
  }


  stages {
    stage ('Stage 1: base template') {

      when {
        allOf {
          expression { env.DELETE == 'false' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          sh '''
              CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
              PROJECT=${CLOUD_PROJECT} \
              REGION=${CLOUD_REGION} \
              ZONE=${CLOUD_ZONE} \
              ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 1
          '''
        }
      }
    }

    stage ('Stage 2: base vm') {

      when {
        allOf {
          expression { env.DELETE == 'false' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          sh '''
              CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
              PROJECT=${CLOUD_PROJECT} \
              REGION=${CLOUD_REGION} \
              ZONE=${CLOUD_ZONE} \
              ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 2
          '''
        }
      }
    }

    stage ('Stage 3: update VM') {

      when {
        allOf {
          expression { env.DELETE == 'false' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          sh '''
              CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
              PROJECT=${CLOUD_PROJECT} \
              REGION=${CLOUD_REGION} \
              ZONE=${CLOUD_ZONE} \
              ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 3
          '''
        }
      }
    }

    stage ('Stage 4: SSH access') {

      when {
        allOf {
          expression { env.DELETE == 'false' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          withCredentials([sshUserPrivateKey(credentialsId: "jenkins-cuttlefish-vm-ssh-private-key", keyFileVariable:
'CUTTLEFISH_SSH_PRIVATE_KEY')]) {
            sh '''
                # Extract public key from credentials.
                eval `ssh-agent -s` || true
                if ssh-add "${CUTTLEFISH_SSH_PRIVATE_KEY}"; then
                    if ssh-add -L > "${WORKSPACE}"/jenkins_rsa.pub ; then
                        echo "SSH key appears valid"
                    else
                        echo "SSH key is invalid"
                        rm -f "${WORKSPACE}"/jenkins_rsa.pub || true
                    fi
                fi

                CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
                JENKINS_SSH_PUB_KEY_FILE="${WORKSPACE}"/jenkins_rsa.pub \
                PROJECT=${CLOUD_PROJECT} \
                REGION=${CLOUD_REGION} \
                ZONE=${CLOUD_ZONE} \
                ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 4
            '''
          }
        }
      }
    }

    stage ('Stage 5: create CF template') {

      when {
        allOf {
          expression { env.DELETE == 'false' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          sh '''
              CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
              PROJECT=${CLOUD_PROJECT} \
              REGION=${CLOUD_REGION} \
              VM_INSTANCE_CREATE=true \
              ZONE=${CLOUD_ZONE} \
              ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 5
          '''
        }
      }
    }

    stage ('Stage 6: delete instances') {

      when {
        allOf {
          expression { env.DELETE == 'true' }
          expression { env.BUILD_NUMBER.toInteger() > 1 }
        }
      }

      steps {
        container(name: 'builder') {
          sh '''
              CUTTLEFISH_REVISION=${ANDROID_CUTTLEFISH_REVISION} \
              PROJECT=${CLOUD_PROJECT} \
              REGION=${CLOUD_REGION} \
              ZONE=${CLOUD_ZONE} \
              ./workloads/android/pipelines/cvd_launcher/cvd_create_instance_template.sh 6
          '''
        }
      }
    }
  }
}
