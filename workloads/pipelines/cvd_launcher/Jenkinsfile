//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// Cuttlefish Virtual Device lanucher.
// 
// 
pipeline {

  parameters {
    choice(name: 'CUTTLEFISH_VM_INSTANCE',
           choices: ['cuttlefish-vm-main', 'cuttlefish-vm-v0931', 'cuttlefish-vm-v0930', 'cuttlefish-vm-v0929'],
           description: '''Android Cuttlefish VM instance based on Android Cuttlefish version.''')

    string(name: 'CUTTLEFISH_DOWNLOAD_URL',
           defaultValue: 'gs://aaos_builds/AAOS_Builder/380',
           description: '''Storage URL for Cuttlefish Virtual Device images and CVD host packages.
           eg aosp_cf_xxx build artifacts.''')

    string(name: 'CUTTLEFISH_MAX_BOOT_TIME',
           defaultValue: '180',
           description: '''Android Cuttlefish max boot time in seconds.
           Wait on VIRTUAL_DEVICE_BOOT_COMPLETED across devices''')

    choice(name: 'CUTTLEFISH_KEEP_ALIVE_TIME',
           choices: ['5', '15', '30', '60', '120'],
           description: '''Time in minutes, to keep CVD alive before stopping.''')

    string(name: 'NUM_INSTANCES',
           defaultValue: '8',
           description: '''launch_cvd --num-instances: number of guest instances to launch.''')

    string(name: 'VM_CPUS',
           defaultValue: '8',
           description: '''launch_cvd --cpus: virtual CPU count.''')

    string(name: 'VM_MEMORY_MB',
           defaultValue: '16384',
           description: '''launch_cvd --memory_mb: total memory available to guest.''')
  }

  agent { label "${CUTTLEFISH_VM_INSTANCE}" }

  stages {
    stage ('Launch Virtual Devices') {
      steps {
        sh '''
          CUTTLEFISH_DOWNLOAD_URL="${CUTTLEFISH_DOWNLOAD_URL}" \
          CUTTLEFISH_MAX_BOOT_TIME="${CUTTLEFISH_MAX_BOOT_TIME}" \
          NUM_INSTANCES=${NUM_INSTANCES} \
          VM_CPUS=${VM_CPUS} \
          VM_MEMORY_MB=${VM_MEMORY_MB} \
          ./workloads/pipelines/cvd_launcher/cvd_start_stop.sh --start
        '''
      }
    }

    stage ('MTK Connect to Virtual Devices') {
      steps {
        sh '''
            echo "NOOP: future"
        '''
      }
    }

    stage ('Keep Devices Alive'){
      steps {
        sh '''
          CUTTLEFISH_KEEP_ALIVE_TIME="${CUTTLEFISH_KEEP_ALIVE_TIME}" \
          ./workloads/pipelines/cvd_launcher/cvd_start_stop.sh --keep-alive
        '''
      }
    }

    stage ('Stop Devices'){
      steps {
        sh '''
          ./workloads/pipelines/cvd_launcher/cvd_start_stop.sh --stop
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'cvd*.log', followSymlinks: false, onlyIfSuccessful: false
    }
  }
}
