//  Copyright (c) 2024 Accenture, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Description:
// Compliance Test Suite Execution on Cuttlefish Virtual Devices.
pipeline {

  parameters {
    choice(name: 'CUTTLEFISH_VM_INSTANCE',
           choices: ['cuttlefish-vm-main', 'cuttlefish-vm-v0931', 'cuttlefish-vm-v0930', 'cuttlefish-vm-v0929'],
           description: '''Android Cuttlefish VM instance based on Android Cuttlefish version.''')

    string(name: 'CUTTLEFISH_DOWNLOAD_URL',
           defaultValue: 'gs://aaos_builds/AAOS_Builder/380',
           description: '''Storage URL for Cuttlefish Virtual Device images and CVD host packages.
           eg aosp_cf_xxx build artifacts.''')

    string(name: 'CUTTLEFISH_MAX_BOOT_TIME',
           defaultValue: '180',
           description: '''Android Cuttlefish max boot time in seconds.
           Wait on VIRTUAL_DEVICE_BOOT_COMPLETED across devices''')

    string(name: 'NUM_INSTANCES',
           defaultValue: '10',
           description: '''launch_cvd --num-instances: number of guest instances to launch.''')

    string(name: 'VM_CPUS',
           defaultValue: '6',
           description: '''launch_cvd --cpus: virtual CPU count.''')

    string(name: 'VM_MEMORY_MB',
           defaultValue: '16384',
           description: '''launch_cvd --memory_mb: total memory available to guest.''')

    string(name: 'CTS_DOWNLOAD_URL',
           defaultValue: '',
           description: '''CTS test harness download URL.
           Use official CTS test harness (empty field) or one built from CTS Builder job and stored in GS Bucket.
           eg gs://cts_builds/CTS_Builder/10/android-cts.zip''')

    choice(name: 'CTS_VERSION',
           choices: ['14', '15'],
           description: '''Select CTS version: Android 14 or 15''')

    string(name: 'CTS_TESTPLAN',
           defaultValue: 'cts-virtual-device-stable',
           description: '''Test plan.
           The cts-virtual-device-stable test plan tracks the latest of what is stable on the virtual platform ''')

    string(name: 'CTS_MODULE',
           defaultValue: 'CtsHostsideNumberBlockingTestCases',
           description: '''CTS module or empty if all modules are required''')

    string(name: 'CTS_TIMEOUT',
           defaultValue: '240',
           description: "CTS Timeout in minutes for each test run")

    booleanParam(name: 'MTK_CONNECT_ENABLE',
                 defaultValue: false,
                 description: '''Enable if wishing to use MTK Connect to view UI of CTS tests on virtual devices''')

  }

  agent { label "${CUTTLEFISH_VM_INSTANCE}" }

  stages {
    stage ('Launch Virtual Devices') {
      steps {
        sh '''
          CUTTLEFISH_DOWNLOAD_URL="${CUTTLEFISH_DOWNLOAD_URL}" \
          CUTTLEFISH_MAX_BOOT_TIME="${CUTTLEFISH_MAX_BOOT_TIME}" \
          NUM_INSTANCES=${NUM_INSTANCES} \
          VM_CPUS=${VM_CPUS} \
          VM_MEMORY_MB=${VM_MEMORY_MB} \
          ./workloads/pipelines/cvd_launcher/cvd_start_stop.sh --start
        '''
      }
    }

    stage ('MTK Connect to Virtual Devices') {
      when {
        expression { env.MTK_CONNECT_ENABLE == 'true' }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'MTK_CONNECT_APIKEY', passwordVariable: 'MTK_CONNECT_PASSWORD', usernameVariable: 'MTK_CONNECT_USERNAME')]) {
          sh '''
            sudo \
            MTK_CONNECT_DOMAIN=${HORIZON_DOMAIN} \
            MTK_CONNECT_USERNAME=${MTK_CONNECT_USERNAME} \
            MTK_CONNECT_PASSWORD=${MTK_CONNECT_PASSWORD} \
            MTK_CONNECTED_DEVICES=${NUM_INSTANCES} \
            MTK_CONNECT_TEST_ARTIFACT="${CUTTLEFISH_DOWNLOAD_URL}" \
            MTK_CONNECT_TESTBENCH="${JOB_NAME}-${BUILD_NUMBER}-aosp-cf" \
            ./workloads/pipelines/cvd_launcher/cvd_mtk_connect.sh --start
          '''
        }
      }
    }

    stage ('CTS execution') {
      steps {
        sh '''
           ./workloads/pipelines/cts_execution/cts_initialise.sh
           CTS_TESTPLAN=${CTS_TESTPLAN} \
           CTS_MODULE=${CTS_MODULE} \
           SHARD_COUNT=${NUM_INSTANCES} \
           ./workloads/pipelines/cts_execution/cts_execution.sh
        '''
      }
    }
  }

  post {
    always {
      withCredentials([usernamePassword(credentialsId: 'MTK_CONNECT_APIKEY', passwordVariable: 'MTK_CONNECT_PASSWORD', usernameVariable: 'MTK_CONNECT_USERNAME')]) {
        sh '''
          sudo \
          MTK_CONNECT_DOMAIN=${HORIZON_DOMAIN} \
          MTK_CONNECT_USERNAME=${MTK_CONNECT_USERNAME} \
          MTK_CONNECT_PASSWORD=${MTK_CONNECT_PASSWORD} \
          MTK_CONNECTED_DEVICES=${NUM_INSTANCES} \
          MTK_CONNECT_TESTBENCH="${JOB_NAME}-${BUILD_NUMBER}-aosp-cf" \
          ./workloads/pipelines/cvd_launcher/cvd_mtk_connect.sh --stop || true
          ./workloads/pipelines/cvd_launcher/cvd_start_stop.sh --stop || true
        '''
      }
      archiveArtifacts artifacts: 'cvd*.log', followSymlinks: false, onlyIfSuccessful: false
      archiveArtifacts artifacts: 'cuttlefish*.tgz', followSymlinks: false, onlyIfSuccessful: false
      archiveArtifacts artifacts: 'cts*.txt', followSymlinks: false, onlyIfSuccessful: false
      archiveArtifacts artifacts: 'android-cts-results/invocation_summary.txt', followSymlinks: false, onlyIfSuccessful: false
      archiveArtifacts artifacts: 'android-cts-results/*.zip', followSymlinks: false, onlyIfSuccessful: false
    }
  }
}
